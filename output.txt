
下面是一些文件路径以及每个文件对应的源码：

##File: /home/winubuntu/projects/ByzerRawCopilot/codecopilot.py
import importlib.util
import os
import ray
import ast
import byzerllm
from typing import List,Dict,Any
import argparse
from byzercopilot.common import SourceCode    
from byzercopilot.pyproject import PyProject


byzerllm.connect_cluster()
llm = byzerllm.ByzerLLM()
llm.setup_template(model="sparkdesk_chat",template="auto")
llm.setup_default_model_name("sparkdesk_chat")


@byzerllm.prompt(render="jinja")
def auto_implement_function_template(instruction:str, content:str)->str:
    '''
    下面是一些文件路径以及每个文件对应的源码：

    {{ content }}

    请参考上面的内容，重新实现所有文件下方法体标记了如下内容的方法：

    ```python
    raise NotImplementedError("This function should be implemented by the model.")
    ```
    
    {{ instruction }}
        
    '''
    pass

@byzerllm.prompt(render="jinja")
def instruction_template(instruction:str, content:str)->str:
    '''
    下面是一些文件路径以及每个文件对应的源码：

    {{ content }}    
    
    {{ instruction }}
        
    '''
    pass


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Auto-implement missing methods in a Python script.")
    parser.add_argument("--source_dir", required=True, help="Path to the project")
    parser.add_argument("--git_url", help="URL of the git repository")
    parser.add_argument("--target_file", required=False, help="the file to write the source code to")
    parser.add_argument("--query",  help="the instruction to handle the source code")
    parser.add_argument("--template",  default="common",help="the instruction to handle the source code")
    args = parser.parse_args()

    source_dir = args.source_dir
    if not os.path.exists(source_dir):
        raise ValueError(f"Directory {source_dir} does not exist.")

    git_url = args.git_url or None
    target_file = args.target_file or None    
    template = args.template 

    pp = PyProject(source_dir=source_dir, git_url=git_url, target_file=target_file)
    pp.run()
    v = pp.output()
    with open(target_file, "w") as file:
        content = v
        if template == "common":
            instruction = args.query or "Please implement the following methods"
            content = instruction_template(instruction=instruction, content=content)
        elif template == "auto_implement":            
            content = auto_implement_function_template(instruction="", content=content)
        file.write(content)
    
    


##File: /home/winubuntu/projects/ByzerRawCopilot/src/byzercopilot/version.py
__version__ = "0.1.0"

##File: /home/winubuntu/projects/ByzerRawCopilot/src/byzercopilot/__init__.py
import importlib.util
import os
import ray
import ast
import byzerllm
from typing import List,Dict,Any
import argparse
from byzercopilot.common import SourceCode    

ray.init(address="auto",namespace="default",ignore_reinit_error=True)  
llm = byzerllm.ByzerLLM()
llm.setup_template(model="sparkdesk_chat",template="auto")
llm.setup_default_model_name("sparkdesk_chat")




if __name__ == "__main__":    
    parser = argparse.ArgumentParser(description="Auto-implement missing methods in a project")
    parser.add_argument("", help="Path to the Python script")
    parser.add_argument("package_name", help="Name of the package to filter imports")
    args = parser.parse_args()

    script_path = args.script_path or "/home/winubuntu/projects/ByzerLLMEvaluation/src/byzerevaluation/judge.py"
    package_name = args.package_name or "byzerevaluation"
    s = run(script_path, package_name)
    print(s)

    s = run(script_path, package_name)
    print(s)
    
    


##File: /home/winubuntu/projects/ByzerRawCopilot/src/byzercopilot/pyproject/__init__.py
from byzercopilot.common import SourceCode
from byzercopilot import common as FileUtils
import os
from typing import Optional,Generator,List,Dict,Any
from git import Repo

class PyProject():
    
    def __init__(self,source_dir,git_url:Optional[str]=None,target_file:Optional[str]=None):
        self.directory = source_dir
        self.git_url = git_url        
        self.target_file = target_file       

    def output(self):
        return open(self.target_file, "r").read()                

    def is_python_file(self,file_path):
        return file_path.endswith(".py")

    def read_file_content(self,file_path):
        with open(file_path, "r") as file:
            return file.read()

    def convert_to_source_code(self,file_path):        
        if not FileUtils.is_likely_useful_file(file_path):
            return None
               
        module_name = file_path
        source_code = self.read_file_content(file_path)

        if not FileUtils.has_sufficient_content(source_code,min_line_count=1):
            return None
        
        if FileUtils.is_test_file(source_code):
            return None
        return SourceCode(module_name=module_name, source_code=source_code)
    

    def get_source_codes(self)->Generator[SourceCode,None,None]:
        for root, dirs, files in os.walk(self.directory):
            for file in files:
                file_path = os.path.join(root, file)
                if self.is_python_file(file_path):
                    source_code = self.convert_to_source_code(file_path)
                    if source_code is not None:
                        yield source_code


    def run(self):
        if self.git_url is not None:
            self.clone_repository()

        if self.target_file is None:                
            for code in self.get_source_codes():
                print(f"##File: {code.module_name}")
                print(code.source_code)                
        else:            
            with open(self.target_file, "w") as file:
                for code in self.get_source_codes():
                    file.write(f"##File: {code.module_name}\n")
                    file.write(f"{code.source_code}\n\n")
                    
    
    def clone_repository(self):   
        if self.git_url is None:
            raise ValueError("git_url is required to clone the repository")
             
        if os.path.exists(self.directory):
            print(f"Directory {self.directory} already exists. Skipping cloning.")
        else:
            print(f"Cloning repository {self.git_url} into {self.directory}")
            Repo.clone_from(self.git_url, self.directory)


    

请仿照PyProject 实现一个 TypeScriptProject
    